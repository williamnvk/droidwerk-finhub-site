---
description: Front-end Specialist
globs: *.tsx
alwaysApply: false
---
You are an expert in TypeScript, Node.js, Next.js App Router, React, Chakra UI V3.

## Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Programming Patterns: Use functional and declarative programming patterns; avoid classes.
- Never user motion;
- Never use useColorModeValue, use _dark props instead.
- Preferred Practices:
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).
- File Structure:
  - Exported component
  - Subcomponents
  - Helpers
  - Static content
  - Types

## Naming Conventions

- Components Location: All components should go in `src/components`.
- Component Naming: Name components like `new-component.tsx`.
- Directories: Use lowercase with dashes for directories (e.g., `components/auth-wizard`).
- Exports: Favor named exports for components.

## TypeScript Usage

- Use TypeScript for all code.
- Prefer `interfaces` over `types`.
- Avoid `enums`; use maps instead.
- Use functional components with TypeScript interfaces.

## Syntax and Formatting

- Use the `function` keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

## UI and Styling

- Use Shadcn UI and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; adopt a mobile-first approach.

## Performance Optimization

- Minimize `use client`, `useEffect`, and `setState`; favor React Server Components (RSC).
- Wrap client components in `Suspense` with fallback.
- Use dynamic loading for non-critical components.
- Optimize images:
  - Use WebP format.
  - Include size data.
  - Implement lazy loading.

## Key Conventions

- Use `nuqs` for URL search parameter state management.
- Optimize Web Vitals (`LCP`, `CLS`, `FID`).
- Limit `use client`:
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.
- Follow Next.js docs for Data Fetching, Rendering, and Routing.
- Use [placekitten.com](mdc:https:/placekitten.com) for placeholder images in seed data.

## Project Structure

### General Structure

Place both the `/app` and `/components` folders under a `/src` directory. This organization offers several benefits:

- Maintains a clean and organized project structure.
- Easier navigation and management of components and pages.
- Adheres to common industry standards, making it easier for other developers to understand and contribute.
- Provides a clear separation between application logic (`/src/app`) and UI components (`/src/components`), improving code readability and reusability.
- Simplifies the process of creating new pages and components.
- Makes the project more modular and easier to scale as the application grows.
- Adheres to the principle of separation of concerns.

### Components Organization

Within the `/src/components` folder, organize components by type or feature:

#### By Type

Group components like forms, buttons, layout elements, etc.

/src/components
├── /ui
│   ├── /Button
│   ├── /Modal
│   └── /Card
├── /forms
│   ├── /TextField
│   └── /Select
└── /layout
    ├── /Navbar
    └── /Footer

#### By Feature

For larger applications, group components related to specific features or domains.

- Private Components: For components used only within specific pages, create a `_components` folder within the relevant `/app` subdirectory.
- Shared Components: Place reusable components used across multiple pages or features in `/src/components`.
- Modular Approach: As the project grows, consider a modular structure where each feature or domain has its own folder containing components, hooks, and utilities specific to that feature.

### Accessibility
- Implement proper ARIA attributes
- Ensure keyboard navigation
- Provide appropriate alt text
- Follow WCAG 2.1 guidelines
- Test with screen readers

### Additional instructions
- Use TypeScript for type safety with Chakra UI components
- Implement proper component composition using Chakra UI
- Utilize Chakra UI's built-in accessibility features
- Use the 'as' prop for semantic HTML rendering
- Implement dark mode using Chakra UI's color mode, using _dark props
- Use Chakra UI's layout components for responsive design
- Follow Chakra UI best practices for performance optimization

### Performance
- Implement code splitting
- Optimize image loading
- Use lazy loading for components
- Minimize re-renders
- Optimize network requests
